#!/bin/bash

for i in "$@"
do
case $i in
    -c=*|--command=*)
    # command to be executed
    COMMAND="${i#*=}"
    shift
    ;;
    -d=*|--deployment-group=*)
    # deployment group name
    DEPLOYMENT_GROUP_NAME="${i#*=}"
    shift
    ;;
    -f=*|--file=*)
    # Path to the file inside s://hostaway-aws-scripts bucket
    FILE="${i#*=}"
    shift
    ;;
esac
done

echo "Command: ${COMMAND}"
echo "Deployment group name: ${DEPLOYMENT_GROUP_NAME}"
echo "File: ${FILE}"

AWS=/var/lib/jenkins/.local/bin/aws

COMMAND_ID=$(${AWS} ssm send-command \
    --document-name "AWS-RunRemoteScript" \
    --targets '{"Key":"tag:Codedeploy","Values":["'"${DEPLOYMENT_GROUP_NAME}"'"]}' \
    --parameters '{"sourceType":["S3"],"sourceInfo":["{\"path\":\"https://s3-us-west-2.amazonaws.com/hostaway-aws-scripts/'$FILE'\"}"],"executionTimeout":["3600"],"commandLine":["'"${COMMAND}"'"]}' \
    --comment "File: '${FILE}',  deployment: '${DEPLOYMENT_GROUP_NAME}'" \
    --timeout-seconds 600 \
    --output-s3-bucket-name "hostaway-script-logs" \
    --output-s3-key-prefix "'${FILE}'" \
    --region us-west-2 \
    --output text \
    --max-errors "1" \
    --query Command.CommandId
)

RES=$?

if [ $RES -ne 0 ]; then
    echo "ERROR invoking command: $COMMAND_ID"
    exit $RES
fi

INSTANCE_IDS=$(
    ${AWS} ec2 describe-instances \
    --filter "Name=tag:Codedeploy,Values='$DEPLOYMENT_GROUP_NAME'" \
    --region us-west-2 \
    --query 'Reservations[*].Instances[*].InstanceId' \
    --output text
)

sleep 3

echo "Instance Ids: $INSTANCE_IDS"

echo "Command launched with id $COMMAND_ID"

# Wait for all instances to have finished running, one way or another
n_instances=$( echo $INSTANCE_IDS | wc -w )
while true; do
    finished=0
    for instance in $INSTANCE_IDS; do
        echo "-------------------------"
        echo "command id: ${COMMAND_ID}"
        echo "instance: ${instance}"
        echo "-------------------------"
        #STATUS=$(${AWS} ssm get-command-invocation --command-id "${COMMAND_ID}" --instance-id "${instance}" --query Status --region us-west-2 --output text | tr '[A-Z]' '[a-z]' )
        STATUS=$(${AWS} ssm list-command-invocations --command-id "${COMMAND_ID}" --instance-id "${instance}" --query CommandInvocations[*].Status --region us-west-2 --output text | tr '[A-Z]' '[a-z]' )
        NOW=$( date +%Y-%m-%dT%H:%M:%S%z )
        echo "${NOW}" "${instance}": "$STATUS"
        case $STATUS in
            pending|inprogress|delayed) : ;;
            *) finished=$(( finished + 1 )) ;;
        esac
    done
    [ $finished -ge "${n_instances}" ] && break
done

for instance in $INSTANCE_IDS; do
    STATUS=$( ${AWS} ssm get-command-invocation --command-id "${COMMAND_ID}" --instance-id "${instance}" --plugin-name "runShellScript" --query Status --output text --region us-west-2 )
    OUT_RESULT=$( ${AWS} ssm get-command-invocation --command-id "${COMMAND_ID}" --instance-id "${instance}" --plugin-name "runShellScript" --query StandardOutputContent --output text --region us-west-2 )
    ERR_RESULT=$( ${AWS} ssm get-command-invocation --command-id "${COMMAND_ID}" --instance-id "${instance}" --plugin-name "runShellScript" --query StandardErrorContent --output text --region us-west-2 )

    echo "------------------------------------"
    echo "RESULTS FROM $instance (STATUS $STATUS):"
    if [ -n "$OUT_RESULT" ]; then
        echo "STDOUT:"
        echo "$OUT_RESULT"
        echo "------------------------------------"
        exit 0
    fi
    if [ -n "$ERR_RESULT" ]; then
        echo "STDERR:"
        echo "$ERR_RESULT"
        echo "------------------------------------"
        exit "$ERR_RESULT"
    fi
    if [ -z "$OUT_RESULT" -a -z "$ERR_RESULT" ]; then
        echo NO OUTPUT RETURNED
    fi
done